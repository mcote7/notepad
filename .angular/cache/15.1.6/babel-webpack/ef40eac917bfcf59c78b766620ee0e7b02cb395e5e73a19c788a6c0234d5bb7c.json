{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = [\"textBox\"];\nexport class AppComponent {\n  constructor() {\n    if ('webkitSpeechRecognition' in window) {\n      console.log(\"speech in window!\");\n      this.initSpeech();\n    } else {\n      console.log(\"speech NOT in window...\");\n    }\n  }\n  initSpeech() {\n    this.speechRecognition = new webkitSpeechRecognition();\n    // console.log(\"init:\",this.speechRecognition)\n    this.speechRecognition.lang = 'en-US';\n    this.speechRecognition.continuous = true;\n    console.log(\"speech init:\", this.speechRecognition);\n    this.startRecognition();\n    this.speechRecognition.onresult = e => {\n      console.log(\"results?\", e);\n      this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n    };\n  }\n  startRecognition() {\n    this.speechRecognition.start();\n  }\n  stopRecognition() {\n    this.speechRecognition.stop();\n  }\n}\nAppComponent.…µfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.…µ…µviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.…µ…µqueryRefresh(_t = i0.…µ…µloadQuery()) && (ctx.textBox = _t.first);\n    }\n  },\n  decls: 5,\n  vars: 0,\n  consts: [[\"textBox\", \"\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.…µ…µelementStart(0, \"h1\");\n      i0.…µ…µtext(1, \"\\uD83D\\uDDE3\\uFE0F Talk to Text Notepad \\uD83D\\uDDD2\\uFE0F\");\n      i0.…µ…µelementEnd();\n      i0.…µ…µelementStart(2, \"p\", null, 0);\n      i0.…µ…µtext(4, \"New Note: \");\n      i0.…µ…µelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,YAAY;EAKrBC;IACI,IAAI,yBAAyB,IAAIC,MAAM,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,IAAI,CAACC,UAAU,EAAE;KACpB,MAAM;MACHF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;EAE9C;EAEAC,UAAU;IACN,IAAI,CAACC,iBAAiB,GAAG,IAAIC,uBAAuB,EAAE;IACtD;IAEA,IAAI,CAACD,iBAAiB,CAACE,IAAI,GAAG,OAAO;IACrC,IAAI,CAACF,iBAAiB,CAACG,UAAU,GAAG,IAAI;IAExCN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAC,IAAI,CAACE,iBAAiB,CAAC;IAElD,IAAI,CAACI,gBAAgB,EAAE;IAEvB,IAAI,CAACJ,iBAAiB,CAACK,QAAQ,GAAIC,CAAK,IAAI;MACxCT,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEQ,CAAC,CAAC;MAC1B,IAAI,CAACC,OAAO,CAACC,aAAa,CAACC,SAAS,IAAIH,CAAC,CAACI,OAAO,CAACJ,CAAC,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;IACzF,CAAC;EAGL;EAEAR,gBAAgB;IACZ,IAAI,CAACJ,iBAAiB,CAACa,KAAK,EAAE;EAClC;EAEAC,eAAe;IACX,IAAI,CAACd,iBAAiB,CAACe,IAAI,EAAE;EACjC;;AAvCSrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAsB;EAAAC;IAAA;;;;;;;;;;;;;MCTzBC,0BAAI;MAAAA,0EAA4B;MAAAA,iBAAK;MAErCA,kCAAY;MAAAA,0BAAU;MAAAA,iBAAI","names":["AppComponent","constructor","window","console","log","initSpeech","speechRecognition","webkitSpeechRecognition","lang","continuous","startRecognition","onresult","e","textBox","nativeElement","innerHTML","results","length","transcript","start","stopRecognition","stop","selectors","viewQuery","i0"],"sourceRoot":"","sources":["C:\\Users\\Michael Cote\\Desktop\\Notepad-Talk\\notepad\\src\\app\\app.component.ts","C:\\Users\\Michael Cote\\Desktop\\Notepad-Talk\\notepad\\src\\app\\app.component.html"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\n\ndeclare var webkitSpeechRecognition: any;\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n    public speechRecognition: any;\n    @ViewChild('textBox') textBox!: ElementRef<HTMLParagraphElement>;\n\n    constructor() {\n        if ('webkitSpeechRecognition' in window) {\n            console.log(\"speech in window!\")\n            this.initSpeech();\n        } else {\n            console.log(\"speech NOT in window...\")\n        }\n    }\n\n    initSpeech() {\n        this.speechRecognition = new webkitSpeechRecognition();\n        // console.log(\"init:\",this.speechRecognition)\n\n        this.speechRecognition.lang = 'en-US';\n        this.speechRecognition.continuous = true;\n\n        console.log(\"speech init:\",this.speechRecognition)\n\n        this.startRecognition();\n\n        this.speechRecognition.onresult = (e:any) => {\n            console.log(\"results?\", e)\n            this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n        };\n\n\n    }\n\n    startRecognition() {\n        this.speechRecognition.start();\n    }\n\n    stopRecognition() {\n        this.speechRecognition.stop();\n    }\n}\n","<h1>üó£Ô∏è Talk to Text Notepad üóíÔ∏è</h1>\n\n<p #textBox>New Note: </p>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}