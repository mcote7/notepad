{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.isRunning = false;\n    if ('webkitSpeechRecognition' in window) {\n      console.log(\"webkit speech in window!\");\n      this.speechRecognition = new webkitSpeechRecognition();\n      this.initSpeech();\n    } else if ('SpeechRecognition' in window) {\n      console.log(\"firefox speech in window!\");\n      this.speechRecognition = new SpeechRecognition();\n      this.initSpeech();\n    } else {\n      console.log(\"speech NOT in window...\");\n    }\n  }\n  initSpeech() {\n    // console.log(\"init:\",this.speechRecognition)\n    this.speechRecognition.lang = 'en-US';\n    this.speechRecognition.continuous = true;\n    console.log(\"speech init:\", this.speechRecognition);\n    this.startRecognition();\n    // events \n    this.speechRecognition.onresult = e => {\n      console.log(\"results?\", e, e.results[e.results.length - 1][0].transcript);\n      this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n    };\n    this.speechRecognition.onerror = e => {\n      console.log(\"error?\", e);\n    };\n    this.speechRecognition.onnomatch = e => {\n      console.log(\"no match?\", e);\n    };\n    this.speechRecognition.onend = e => {\n      console.log(\"ended?\", e);\n      if (this.isRunning) {\n        this.startRecognition();\n      }\n    };\n  }\n  startRecognition() {\n    this.speechRecognition.start();\n    this.isRunning = true;\n  }\n  stopRecognition() {\n    this.speechRecognition.stop();\n    this.isRunning = false;\n  }\n  downloadNote() {\n    console.log(\"download note\");\n  }\n};\n__decorate([ViewChild('textBox')], AppComponent.prototype, \"textBox\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAcC,SAAS,QAAQ,eAAe;AAUzD,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMrBC;IAHO,cAAS,GAAY,KAAK;IAI7B,IAAI,yBAAyB,IAAIC,MAAM,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAEvC,IAAI,CAACC,iBAAiB,GAAG,IAAIC,uBAAuB,EAAE;MACtD,IAAI,CAACC,UAAU,EAAE;KAEpB,MAAM,IAAG,mBAAmB,IAAIL,MAAM,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExC,IAAI,CAACC,iBAAiB,GAAG,IAAIG,iBAAiB,EAAE;MAChD,IAAI,CAACD,UAAU,EAAE;KAEpB,MAAM;MACHJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;EAE9C;EAEAG,UAAU;IACN;IAEA,IAAI,CAACF,iBAAiB,CAACI,IAAI,GAAG,OAAO;IACrC,IAAI,CAACJ,iBAAiB,CAACK,UAAU,GAAG,IAAI;IAExCP,OAAO,CAACC,GAAG,CAAC,cAAc,EAAC,IAAI,CAACC,iBAAiB,CAAC;IAElD,IAAI,CAACM,gBAAgB,EAAE;IAEvB;IACA,IAAI,CAACN,iBAAiB,CAACO,QAAQ,GAAIC,CAAK,IAAI;MACxCV,OAAO,CAACC,GAAG,CAAC,UAAU,EAAES,CAAC,EAAEA,CAAC,CAACC,OAAO,CAACD,CAAC,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC;MACzE,IAAI,CAACC,OAAO,CAACC,aAAa,CAACC,SAAS,IAAIN,CAAC,CAACC,OAAO,CAACD,CAAC,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;IACzF,CAAC;IAED,IAAI,CAACX,iBAAiB,CAACe,OAAO,GAAIP,CAAK,IAAI;MACvCV,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAES,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,CAACR,iBAAiB,CAACgB,SAAS,GAAIR,CAAK,IAAI;MACzCV,OAAO,CAACC,GAAG,CAAC,WAAW,EAAES,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,CAACR,iBAAiB,CAACiB,KAAK,GAAIT,CAAK,IAAI;MACrCV,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAES,CAAC,CAAC;MACxB,IAAG,IAAI,CAACU,SAAS,EAAE;QACf,IAAI,CAACZ,gBAAgB,EAAE;;IAE/B,CAAC;EACL;EAEAA,gBAAgB;IACZ,IAAI,CAACN,iBAAiB,CAACmB,KAAK,EAAE;IAC9B,IAAI,CAACD,SAAS,GAAG,IAAI;EACzB;EAEAE,eAAe;IACX,IAAI,CAACpB,iBAAiB,CAACqB,IAAI,EAAE;IAC7B,IAAI,CAACH,SAAS,GAAG,KAAK;EAC1B;EAEAI,YAAY;IACRxB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAChC;CACH;AAjEyBwB,YAArB7B,SAAS,CAAC,SAAS,CAAC,6CAA4C;AAJxDC,YAAY,eALxBF,SAAS,CAAC;EACP+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACrC,CAAC,GACW/B,YAAY,CAqExB;SArEYA,YAAY","names":["Component","ViewChild","AppComponent","constructor","window","console","log","speechRecognition","webkitSpeechRecognition","initSpeech","SpeechRecognition","lang","continuous","startRecognition","onresult","e","results","length","transcript","textBox","nativeElement","innerHTML","onerror","onnomatch","onend","isRunning","start","stopRecognition","stop","downloadNote","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Michael Cote\\Desktop\\Notepad-Talk\\notepad\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\n\ndeclare var webkitSpeechRecognition: any;\ndeclare var SpeechRecognition: any;\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n    private speechRecognition: any;\n    public isRunning: boolean = false;\n    @ViewChild('textBox') textBox!: ElementRef<HTMLParagraphElement>;\n\n    constructor() {\n        if ('webkitSpeechRecognition' in window) {\n            console.log(\"webkit speech in window!\")\n\n            this.speechRecognition = new webkitSpeechRecognition();\n            this.initSpeech();\n\n        } else if('SpeechRecognition' in window) {\n            console.log(\"firefox speech in window!\")\n\n            this.speechRecognition = new SpeechRecognition();\n            this.initSpeech();\n\n        } else {\n            console.log(\"speech NOT in window...\")\n        }\n    }\n\n    initSpeech() {\n        // console.log(\"init:\",this.speechRecognition)\n\n        this.speechRecognition.lang = 'en-US';\n        this.speechRecognition.continuous = true;\n\n        console.log(\"speech init:\",this.speechRecognition)\n\n        this.startRecognition();\n\n        // events \n        this.speechRecognition.onresult = (e:any) => {\n            console.log(\"results?\", e, e.results[e.results.length - 1][0].transcript)\n            this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n        };\n\n        this.speechRecognition.onerror = (e:any) => {\n            console.log(\"error?\", e)\n        };\n\n        this.speechRecognition.onnomatch = (e:any) => {\n            console.log(\"no match?\", e)\n        };\n\n        this.speechRecognition.onend = (e:any) => {\n            console.log(\"ended?\", e)\n            if(this.isRunning) {\n                this.startRecognition();\n            }\n        };\n    }\n\n    startRecognition() {\n        this.speechRecognition.start();\n        this.isRunning = true;\n    }\n\n    stopRecognition() {\n        this.speechRecognition.stop();\n        this.isRunning = false;\n    }\n\n    downloadNote() {\n        console.log(\"download note\")\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}