{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"textBox\"];\nfunction AppComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.…µ…µgetCurrentView();\n    i0.…µ…µelementStart(0, \"button\", 1);\n    i0.…µ…µlistener(\"click\", function AppComponent_button_7_Template_button_click_0_listener() {\n      i0.…µ…µrestoreView(_r3);\n      const ctx_r2 = i0.…µ…µnextContext();\n      return i0.…µ…µresetView(ctx_r2.downloadNote());\n    });\n    i0.…µ…µtext(1, \" download note\\n\");\n    i0.…µ…µelementEnd();\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.isRunning = false;\n    if ('webkitSpeechRecognition' in window) {\n      console.log(\"webkit speech in window!\");\n      this.speechRecognition = new webkitSpeechRecognition();\n      this.initSpeech();\n    } else if ('SpeechRecognition' in window) {\n      console.log(\"firefox speech in window!\");\n      this.speechRecognition = new SpeechRecognition();\n      this.initSpeech();\n    } else {\n      console.log(\"speech NOT in window...\");\n    }\n  }\n  initSpeech() {\n    // console.log(\"init:\",this.speechRecognition)\n    this.speechRecognition.lang = 'en-US';\n    this.speechRecognition.continuous = true;\n    console.log(\"speech init:\", this.speechRecognition);\n    this.startRecognition();\n    // events \n    this.speechRecognition.onresult = e => {\n      console.log(\"results?\", e, e.results[e.results.length - 1][0].transcript);\n      this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n    };\n    this.speechRecognition.onerror = e => {\n      console.log(\"error?\", e);\n    };\n    this.speechRecognition.onnomatch = e => {\n      console.log(\"no match?\", e);\n    };\n    this.speechRecognition.onend = e => {\n      console.log(\"ended?\", e);\n      if (this.isRunning) {\n        this.startRecognition();\n      }\n    };\n  }\n  startRecognition() {\n    this.speechRecognition.start();\n    this.isRunning = true;\n  }\n  stopRecognition() {\n    this.speechRecognition.stop();\n    this.isRunning = false;\n  }\n  downloadNote() {\n    console.log(\"download note\");\n    const text = this.textBox.nativeElement.innerHTML;\n    const fileName = \"note.txt\";\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', fileName);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n}\nAppComponent.…µfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.…µ…µviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.…µ…µqueryRefresh(_t = i0.…µ…µloadQuery()) && (ctx.textBox = _t.first);\n    }\n  },\n  decls: 8,\n  vars: 2,\n  consts: [[\"textBox\", \"\"], [3, \"click\"], [3, \"click\", 4, \"ngIf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.…µ…µelementStart(0, \"h1\");\n      i0.…µ…µtext(1, \"\\uD83D\\uDDE3\\uFE0F Talk to Text Notepad \\uD83D\\uDDD2\\uFE0F\");\n      i0.…µ…µelementEnd();\n      i0.…µ…µelementStart(2, \"p\", null, 0);\n      i0.…µ…µtext(4, \"New Note: \");\n      i0.…µ…µelementEnd();\n      i0.…µ…µelementStart(5, \"button\", 1);\n      i0.…µ…µlistener(\"click\", function AppComponent_Template_button_click_5_listener() {\n        return ctx.isRunning ? ctx.stopRecognition() : ctx.startRecognition();\n      });\n      i0.…µ…µtext(6);\n      i0.…µ…µelementEnd();\n      i0.…µ…µtemplate(7, AppComponent_button_7_Template, 2, 0, \"button\", 2);\n    }\n    if (rf & 2) {\n      i0.…µ…µadvance(6);\n      i0.…µ…µtextInterpolate1(\" \", ctx.isRunning ? \"stop\" : \"start\", \"\\n\");\n      i0.…µ…µadvance(1);\n      i0.…µ…µproperty(\"ngIf\", !ctx.isRunning);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","window","console","log","speechRecognition","webkitSpeechRecognition","initSpeech","SpeechRecognition","lang","continuous","startRecognition","onresult","e","results","length","transcript","textBox","nativeElement","innerHTML","onerror","onnomatch","onend","isRunning","start","stopRecognition","stop","downloadNote","text","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\Michael Cote\\Desktop\\Notepad-Talk\\notepad\\src\\app\\app.component.html","C:\\Users\\Michael Cote\\Desktop\\Notepad-Talk\\notepad\\src\\app\\app.component.ts"],"sourcesContent":["<h1>üó£Ô∏è Talk to Text Notepad üóíÔ∏è</h1>\n\n<p #textBox>New Note: </p>\n\n<button\n    (click)=\"isRunning ? stopRecognition() : startRecognition()\">\n    {{ isRunning ? 'stop':'start' }}\n</button>\n\n<button \n    *ngIf=\"!isRunning\"\n    (click)=\"downloadNote()\">\n    download note\n</button>","import { Component, ElementRef, ViewChild } from '@angular/core';\n\ndeclare var webkitSpeechRecognition: any;\ndeclare var SpeechRecognition: any;\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n    private speechRecognition: any;\n    public isRunning: boolean = false;\n    @ViewChild('textBox') textBox!: ElementRef<HTMLParagraphElement>;\n\n    constructor() {\n        if ('webkitSpeechRecognition' in window) {\n            console.log(\"webkit speech in window!\")\n\n            this.speechRecognition = new webkitSpeechRecognition();\n            this.initSpeech();\n\n        } else if('SpeechRecognition' in window) {\n            console.log(\"firefox speech in window!\")\n\n            this.speechRecognition = new SpeechRecognition();\n            this.initSpeech();\n\n        } else {\n            console.log(\"speech NOT in window...\")\n        }\n    }\n\n    initSpeech() {\n        // console.log(\"init:\",this.speechRecognition)\n\n        this.speechRecognition.lang = 'en-US';\n        this.speechRecognition.continuous = true;\n\n        console.log(\"speech init:\",this.speechRecognition)\n\n        this.startRecognition();\n\n        // events \n        this.speechRecognition.onresult = (e:any) => {\n            console.log(\"results?\", e, e.results[e.results.length - 1][0].transcript)\n            this.textBox.nativeElement.innerHTML += e.results[e.results.length - 1][0].transcript;\n        };\n\n        this.speechRecognition.onerror = (e:any) => {\n            console.log(\"error?\", e)\n        };\n\n        this.speechRecognition.onnomatch = (e:any) => {\n            console.log(\"no match?\", e)\n        };\n\n        this.speechRecognition.onend = (e:any) => {\n            console.log(\"ended?\", e)\n            if(this.isRunning) {\n                this.startRecognition();\n            }\n        };\n    }\n\n    startRecognition() {\n        this.speechRecognition.start();\n        this.isRunning = true;\n    }\n\n    stopRecognition() {\n        this.speechRecognition.stop();\n        this.isRunning = false;\n    }\n\n    downloadNote() {\n        console.log(\"download note\")\n        const text:string = this.textBox.nativeElement.innerHTML;\n        const fileName:string = \"note.txt\";\n\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.click();\n        document.body.removeChild(element);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}